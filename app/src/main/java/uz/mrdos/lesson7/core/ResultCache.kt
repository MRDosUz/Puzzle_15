package uz.mrdos.lesson7.coreimport android.content.Contextimport android.content.SharedPreferencesimport uz.mrdos.lesson7.ui.ResultActivityobject ResultCache {    private lateinit var sharedPreferences: SharedPreferences    private val KEY_STEP_ID = "step_id_by_"    private val KEY_TIME_ID = "time_id_by_"    private val KEY_NEXT_ID = "next_id_by_"    private val KEY_THEME_MODE = "last_theme"    private val KEY_IS_GAME_PAGE = "is_game_page"    fun init(context: Context) {        sharedPreferences = context.getSharedPreferences("result_cache", Context.MODE_PRIVATE)    }    fun saveNextResult(resultDto: ResultDto, gameMode: GameMode){        val currentId = getNextIdByGameMode(gameMode)        sharedPreferences.edit().putInt("$KEY_STEP_ID${gameMode.name}_$currentId", resultDto.totalStep).apply()        sharedPreferences.edit().putInt("$KEY_TIME_ID${gameMode.name}_$currentId", resultDto.totalTime).apply()        increaseIdByGameMode(gameMode)    }    fun getNextIdByGameMode(gameMode: GameMode) = sharedPreferences.getInt("$KEY_NEXT_ID${gameMode.name}", 0)    fun increaseIdByGameMode(gameMode: GameMode) = sharedPreferences.edit().putInt("$KEY_NEXT_ID${gameMode.name}", getNextIdByGameMode(gameMode) + 1).apply()    fun getAllResultsByGameMode(gameMode: GameMode): ArrayList<ResultDto>{        val length = getNextIdByGameMode(gameMode)        val resultsList = ArrayList<ResultDto>()        for (i in 0 until length){            val currentStep = sharedPreferences.getInt("$KEY_STEP_ID${gameMode.name}_$i", 0)            val currentTime = sharedPreferences.getInt("$KEY_TIME_ID${gameMode.name}_$i", 0)            resultsList.add(ResultDto(currentTime, currentStep))        }        return resultsList    }    fun saveForGamePage() = sharedPreferences.edit().putBoolean(KEY_IS_GAME_PAGE, true).apply()    fun saveForResultPage() = sharedPreferences.edit().putBoolean(KEY_IS_GAME_PAGE, false).apply()    fun getForGameOrResultPage() = sharedPreferences.getBoolean(KEY_IS_GAME_PAGE, true)    fun saveLastThemeMode(themeMode: ThemeMode) {        sharedPreferences.edit().putString(KEY_THEME_MODE, themeMode.name).apply()    }    fun getLastThemeMode(): ThemeMode {        val themeModeName: String =            sharedPreferences.getString(KEY_THEME_MODE, ThemeMode.DAY.name)!!        return ThemeMode.valueOf(themeModeName)    }    fun clearAllData(){        sharedPreferences.edit().clear().apply()    }    fun clearBestResult(){        sharedPreferences.edit().remove(ResultActivity.KEY_LAST_STEP).apply()        sharedPreferences.edit().remove(ResultActivity.KEY_LAST_TIME).apply()        sharedPreferences.edit().remove(ResultActivity.KEY_BEST_STEP_BY_STEP).apply()        sharedPreferences.edit().remove(ResultActivity.KEY_BEST_TIME_BY_STEP).apply()        sharedPreferences.edit().remove(ResultActivity.KEY_BEST_STEP_BY_TIME).apply()        sharedPreferences.edit().remove(ResultActivity.KEY_BEST_TIME_BY_TIME).apply()    }}